{"version":3,"sources":["assets\\Scripts\\Platform.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Player from \"./Player\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Platform extends cc.Component {\r\n  @property({ type: cc.AudioClip })\r\n  soundEffect: cc.AudioClip = null;\r\n\r\n  @property(Player)\r\n  player: Player = null;\r\n\r\n  protected isTouched: boolean = false;\r\n\r\n  private anim: cc.Animation = null;\r\n\r\n  private animState: cc.AnimationState = null;\r\n\r\n  private highestPos: number = 118;\r\n\r\n  private moveSpeed: number = 100;\r\n\r\n  private springVelocity: number = 320;\r\n\r\n  onLoad(){\r\n\r\n      cc.director.getPhysicsManager().enabled = true;\r\n          \r\n  }\r\n\r\n  start() {\r\n    this.anim = this.getComponent(cc.Animation);\r\n\r\n    if (this.node.name == \"Conveyor\") {\r\n      this.node.scaleX = Math.random() >= 0.5 ? 1 : -1;\r\n      this.moveSpeed *= this.node.scaleX;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.isTouched = false;\r\n  }\r\n\r\n  update(dt) {\r\n    if (\r\n      this.node.y - this.highestPos >= 0 &&\r\n      this.node.y - this.highestPos < 100\r\n    )\r\n      this.getComponent(cc.PhysicsBoxCollider).enabled = false;\r\n    else this.getComponent(cc.PhysicsBoxCollider).enabled = true;\r\n  }\r\n\r\n  playAnim() {\r\n    if (this.anim) this.animState = this.anim.play();\r\n  }\r\n\r\n  getAnimState() {\r\n    if (this.animState) return this.animState;\r\n  }\r\n\r\n  platformDestroy() {\r\n    cc.log(this.node.name + \" Platform destory.\");\r\n    this.node.destroy();\r\n  }\r\n\r\n  // ===================== TODO =====================\r\n  // 1. In the physics lecture, we know that Cocos Creator\r\n  //    provides four contact callbacks. You need to use callbacks to\r\n  //    design different behaviors for different platforms.\r\n  \r\n    onBeginContact(contact, selfCollider, otherCollider)    {\r\n\r\n      if(otherCollider.node.name == \"player\")\r\n      {\r\n        // console.log(contact.getWorldManifold().normal.Vec2.)\r\n        if(this.isTouched==false){\r\n          cc.audioEngine.playEffect(this.soundEffect,false);\r\n          this.isTouched=true;\r\n\r\n          if(this.node.name==\"Nails\"){\r\n            otherCollider.node.getComponent(\"Player\").playerDamage();\r\n          }\r\n          else {\r\n            otherCollider.node.getComponent(\"Player\").playerRecover();\r\n          }\r\n        }\r\n        \r\n        if(this.node.name==\"Fake\"){\r\n\r\n          this.getAnimState();\r\n          this.playAnim();\r\n\r\n          this.schedule(function() {\r\n            contact.disabledonce = true;\r\n          }, 0.2);\r\n        }\r\n\r\n        else if(this.node.name==\"Trampoline\"){\r\n          this.isTouched=false;\r\n          this.getAnimState();\r\n          this.playAnim();\r\n          otherCollider.getComponent(cc.RigidBody).linearVelocity=cc.v2(0,this.springVelocity);\r\n        }\r\n      }\r\n    }\r\n\r\n    onPreSolve(contact, selfCollider, otherCollider){\r\n\r\n      if(otherCollider.node.name == \"player\")\r\n      {\r\n        if(this.node.name==\"Conveyor\"){\r\n          otherCollider.getComponent(cc.RigidBody).linearVelocity=cc.v2(this.moveSpeed,0);\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n    onEndContact(contact, selfCollider, otherCollider){\r\n      if(this.node.name==\"Conveyor\"){\r\n        otherCollider.getComponent(cc.RigidBody).linearVelocity=contact.moveSpeed;\r\n      }\r\n      // contact.enabled = true;\r\n    }\r\n  //\r\n  //    Hints: The callbacks are \"onBeginContact\", \"onEndContact\", \"onPreSolve\", \"onPostSolve\".\r\n  //\r\n  // 2. There are five different types of platforms: \"Normal\", \"Fake\", \"Nails\", \"Trampoline\", \"Conveyor\".\r\n  //    When player touches the platform, you need to play the corresponding\r\n  //    sound effect for each platform. (The audioClip named \"soundEffect\")\r\n  //    Note that the sound effect only plays on the first time the player touches the platform.\r\n  //\r\n  // 3. \"Trampoline\" and \"Fake\" need to play animation when the player touches them.\r\n  //    TAs have finished the animation functions, \"playAnim\" & \"getAnimState\", for you.\r\n  //    You can directly call \"playAnim\" to play animation, and call \"getAnimState\" to get the current animation state.\r\n  //    You have to play animations at the proper timing.\r\n  //\r\n  // 4. For \"Trampoline\", you have to do \"spring effect\" whenever the player touches it\r\n  //\r\n  //    Hints: Change \"linearVelocity\" of the player's rigidbody to make him jump.\r\n  //    The jump value is \"springVelocity\".\r\n  //\r\n  // 5. For \"Conveyor\", you have to do \"delivery effect\" when player is in contact with it.\r\n  //\r\n  //    Hints: Change \"linearVelocity\" of the player's rigidbody to make him move.\r\n  //    The move value is \"moveSpeed\".\r\n  //\r\n  // 6. For \"Fake\", you need to make the player fall 0.2 seconds after he touches the platform.\r\n  //\r\n  // 7. All the platforms have only \"upside\" collision. You have to prevent the collisions from the other directions.\r\n  //\r\n  //    Hints: You can use \"contact.getWorldManifold().normal\" to judge collision direction.\r\n  //\r\n  //\r\n  // 8. When player touches \"Nails\" platform, you need to call the function \"playerDamage\" in \"Player.ts\" to update player health,\r\n  //    or call the function \"playerRecover\" in \"Player.ts\" when player touches other platforms.\r\n  //\r\n  // 9. When platforms touch the node named \"upperBound\", you need to call the function \"platformDestroy\" to destroy the platform.\r\n  // ================================================\r\n}\r\n"]}